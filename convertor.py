import re
import logging
from xml.dom import minidom
import argparse
from pylarion import work_item
from update_list_of_tempest_in_polarion import get_polarion_tempest_test_cases

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def process_xml(xml_file, out_xml, custom_fields, properties, polarion_test_cases):
    xml_file = minidom.parse(xml_file)

    res_doc = minidom.Document()
    test_suites = res_doc.createElement('testsuites')

    new_properties = res_doc.createElement('properties')

    write_testsuite_settings(
        custom_fields, new_properties, res_doc, 'polarion-custom-')
    write_testsuite_settings(
        properties, new_properties, res_doc, 'polarion-')
    test_suites.appendChild(new_properties)

    # process all the testcases within testsuite
    for test_case_xml in xml_file.getElementsByTagName('testcase'):
        name = test_case_xml.attributes['name'].value
        classname = test_case_xml.attributes['classname'].value

        try:
            if not classname:
                continue
            full_name = "{}.{}".format(classname, name)
            full_name_without_uuid = re.match(
                r'(.*)\[(.*id-)*(.*)\].*', full_name).group(1)
            uuid = re.match(r'.*\[(.*id-)*([^,.]*).*\].*',
                            full_name).group(2).split(',')[0]
            if full_name_without_uuid not in polarion_test_cases.keys():
                print "Test with automation-test id {} not exist in polarion".format(full_name_without_uuid)
                continue
            logger.info("Writing polarion-testcase-id: %s",
                        polarion_test_cases[full_name_without_uuid])
            properties = xml_file.createElement('properties')
            new_property = xml_file.createElement('property')
            new_property.setAttribute('name', 'polarion-testcase-id')
            new_property.setAttribute('value', polarion_test_cases[full_name_without_uuid])
            properties.appendChild(new_property)

            test_case_xml.appendChild(properties)

        except (AttributeError, IndexError):
            pass

    for test_suite_xml in xml_file.getElementsByTagName('testsuite'):
        test_suites.appendChild(test_suite_xml)
    res_doc.appendChild(test_suites)
    with open(out_xml, 'w') as res_file:
        res_file.write(res_doc.toxml())


def write_testsuite_settings(fields, xml_element, xml_file, prefix):
    for name, value in fields.items():
        new_property = xml_file.createElement('property')
        new_property.setAttribute('name', prefix + name)
        new_property.setAttribute('value', str(value))
        xml_element.appendChild(new_property)


def process_properties_fields(args_fields):
    custom_fields = {}
    if args_fields is not None:
        for field in args_fields.split(','):
            key, value = field.split('=')
            custom_fields[key.strip()] = value.strip()
    return custom_fields


def main():
    parser = argparse.ArgumentParser(description='Updates Polarion Test Runs')
    parser.add_argument('-i', '--xml-file', help='The xUnit xml resulting file',
                        required=True)
    parser.add_argument('-o', '--output-xml', help='The resulting file',
                        default='result.xml')
    parser.add_argument('--user-id', help='The user is',
                        default='ci-user')
    parser.add_argument('--project-id', help='The project id',
                        default='RHELOpenStackPlatform')
    parser.add_argument('--testrun-finished',
                        help='Specifies whether the testrun should be finished',
                        action='store_false')
    parser.add_argument('--include-skipped',
                        help='Include skipped test cases',
                        action='store_true')
    parser.add_argument('--testrun-title',
                        help='Test run title',
                        default='Generated by CI')
    parser.add_argument('--testrun-id',
                        help='Test run id (name)',
                        required=True)
    parser.add_argument('--custom-fields',
                        help='Custom fields separated with commas')
    parser.add_argument('--properties',
                        help='Properties separated with commas')

    args = parser.parse_args()

    custom_fields = process_properties_fields(args.custom_fields)
    properties = {
        "project-id": args.project_id,
        "user-id": args.user_id,
        "set-testrun-finished": args.testrun_finished,
        "include-skipped": args.include_skipped,
        "testrun-id": args.testrun_id,
        "testrun-title": args.testrun_title
    }

    test_cases = get_polarion_tempest_test_cases()
    test_cases_test = {}
    test_cases_key = test_cases.keys()[0]
    test_cases_test[test_cases.keys()[0]] = test_cases[test_cases.keys()[0]]
    import pdb

    process_xml(args.xml_file,
                args.output_xml,
                custom_fields=custom_fields,
                properties=properties)